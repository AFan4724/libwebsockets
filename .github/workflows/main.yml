name: Android arm64-v8a Build

on: [push, pull_request]

env:
  ANDROID_NDK: ${{ github.workspace }}/android-ndk-r25b
  BUILD_DIR: build_android
  INSTALL_DIR: install_android
  OPENSSL_PREFIX: ${{ github.workspace }}/openssl-android-arm64

jobs:
  android-build:
    name: Android arm64-v8a
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup NDK
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip -q android-ndk-r25b-linux.zip -d ${{ github.workspace }}
          echo "${{ env.ANDROID_NDK }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          # 验证工具链完整路径（网页7关键步骤）
          ls ${{ env.ANDROID_NDK }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang

      - name: Build OpenSSL
        run: |
          export OPENSSL_INSTALL_DIR=${{ env.OPENSSL_PREFIX }}
          rm -rf $OPENSSL_INSTALL_DIR
          
          # 修复标签与提交的精确匹配（网页3解决方案）
          git clone --depth 1 --branch OpenSSL_1_1_1w https://github.com/openssl/openssl.git openssl-src
          cd openssl-src
          git fetch origin tag OpenSSL_1_1_1w --no-tags
          git checkout e04bd3433fd84e1861bf258ea37928d9845e6a86 --force

          export ANDROID_NDK_HOME=${{ env.ANDROID_NDK }}
          # 增强架构参数配置（网页6核心修复）
          ./Configure --prefix=$OPENSSL_INSTALL_DIR \
            android-arm64 \
            -D__ANDROID_API__=24 \
            no-shared \
            no-asm \
            -fPIC \
            -march=armv8-a \  # 显式指定ARMv8指令集
            -fstack-protector-strong \
            -D_FORTIFY_SOURCE=2 \
            --cross-compile-prefix=aarch64-linux-android24- \
            --sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot

          # 显式指定完整工具链路径（网页8关键配置）
          make -j$(nproc) \
            CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang \
            AR=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar \
            RANLIB=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib \
            LD=ld.lld \
            NM=llvm-nm \
            STRIP=llvm-strip
          
          make install_sw

      - name: Verify OpenSSL Build
        run: |
          # 增强架构验证机制（网页7推荐方法）
          echo "==== 二进制文件架构验证 ===="
          file ${{ env.OPENSSL_PREFIX }}/lib/libssl.a | grep "ARM aarch64" || (echo "Arch mismatch!"; exit 1)
          
          echo "==== ELF头验证 ===="
          readelf -h ${{ env.OPENSSL_PREFIX }}/lib/libssl.a | grep "Machine:.*AArch64" || (echo "ELF header invalid"; exit 1)
          
          echo "==== 关键符号验证 ===="
          nm ${{ env.OPENSSL_PREFIX }}/lib/libssl.a | grep -q SSL_accept || (echo "SSL_accept missing"; exit 1)
          nm ${{ env.OPENSSL_PREFIX }}/lib/libcrypto.a | grep -q EVP_DecryptInit || (echo "Crypto symbols missing"; exit 1)

      - name: Configure libwebsockets
        env:
          PKG_CONFIG_PATH: ${{ env.OPENSSL_PREFIX }}/lib/pkgconfig
        run: |
          cmake -B $BUILD_DIR -S . \
            -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-24 \
            -DCMAKE_TOOLCHAIN_FILE=${{ env.ANDROID_NDK }}/build/cmake/android.toolchain.cmake \
            -DLWS_WITH_SSL=ON \
            -DLWS_OPENSSL_LIBRARIES="${{ env.OPENSSL_PREFIX }}/lib/libssl.a;${{ env.OPENSSL_PREFIX }}/lib/libcrypto.a" \
            -DLWS_OPENSSL_INCLUDE_DIRS=${{ env.OPENSSL_PREFIX }}/include \
            -DLWS_OPENSSL_VERSION=1.1.1w \
            -DLWS_WITHOUT_TESTAPPS=ON \
            -DCMAKE_C_FLAGS="-fPIE -pie -Wno-deprecated-declarations" \
            -DCMAKE_FIND_ROOT_PATH="${{ env.OPENSSL_PREFIX }};${{ env.ANDROID_NDK }}/sysroot"  # 网页6关键配置

      - name: Build libwebsockets
        run: |
          cmake --build $BUILD_DIR --target install --parallel $(nproc)
          # 深度符号验证（网页7推荐）
          readelf -h $INSTALL_DIR/lib/libwebsockets.so | grep "Machine:.*AArch64" || (echo "Invalid ELF header"; exit 1)
          nm -D $INSTALL_DIR/lib/libwebsockets.so | grep -E 'lws_ssl_|websocket' || (echo "Core symbols missing"; exit 1)
          objdump -x $INSTALL_DIR/lib/libwebsockets.so | grep NEEDED | grep -q libc++_shared.so || (echo "C++ runtime dependency missing"; exit 1)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-arm64-v8a
          path: |
            ${{ env.INSTALL_DIR }}/lib/*
            ${{ env.INSTALL_DIR }}/include/*
          if-no-files-found: error
          retention-days: 7
